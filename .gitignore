# Data
/data/

# Models and ML artifacts
/models/
*.pkl
*.joblib
*.h5
*.onnx
*.pt
*.pth

# Mac OS-specific storage files
.DS_Store

# vim
*.swp
*.swo

## https://github.com/github/gitignore/blob/e8554d85bf62e38d6db966a50d2064ac025fd82a/Python.gitignore

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# MkDocs documentation
docs/site/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# pixi
#   pixi.lock should be committed to version control for reproducibility
#   .pixi/ contains the environments and should not be committed
.pixi/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

reports/figures/

# Experiment management - exclude large files but keep metadata
experiments/submission*.csv            # experiments直下の提出ファイル
experiments/**/submission*.csv         # experiments配下全ての提出ファイル
data/processed/submission*.csv         # 提出ファイル（processedディレクトリ）
**/submission*.csv                     # 全ディレクトリの提出ファイル（大容量）
submission*.csv                        # ルートディレクトリの提出ファイル
experiments/**/models/                # モデルファイル（大容量）
experiments/**/*_cv_results_*.json    # タイムスタンプ付きCV結果（冗長）
experiments/**/feature_importance*.csv # 特徴量重要度（生成可能）

# 個別指定で確実に除外
experiments/exp004_ticket016_rhythm_periodicity/submission.csv
experiments/exp005_ticket008_03_dimensionality_reduction/submission_ticket008_03_dimensionality.csv
experiments/exp005_ticket008_03_dimensionality_reduction/feature_importance.csv
experiments/exp005_ticket008_03_dimensionality_reduction/ticket008_03_dimensionality_full_cv_results_20250923_180607.json
experiments/exp005_ticket008_03_dimensionality_reduction/ticket008_03_dimensionality_sample_cv_results_20250923_154029.json
experiments/exp01_baseline_lgb/submission.csv
experiments/exp02_multicollinearity_removal/submission.csv

# テスト・検証用結果ファイル（再生成可能）
results/*.json

# 個別指定で確実に除外（追加）
experiments/submission_ticket017_regularized_20250926_203334.csv
experiments/submission_ticket017_optimized_20250926_210000.csv
data/processed/submission_ticket017_01_02_only_20250926_214914.csv

# TICKET-017 scripts (moved to appropriate directories)
# Note: Files have been moved to scripts/ and tests/ directories

# Keep important experiment files:
# experiments/*/config.json (実験設定)
# experiments/*/results.json (実験メタデータ)
# experiments/*/README.md (実験レポート)
# experiments/*/submit_commands.txt (提出コマンド)

sample_code/*